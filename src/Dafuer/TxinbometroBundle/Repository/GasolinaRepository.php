<?php

namespace Dafuer\TxinbometroBundle\Repository;

use Doctrine\ORM\EntityRepository;

use Dafuer\TxinbometroBundle\Entity\ResumenConsumo;

/**
 * GasolinaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GasolinaRepository extends EntityRepository
{
    public function getAllFrom($vehiculo_id) {
        return $this->_em->createQuery('SELECT g FROM TxinbometroBundle:Gasolina g WHERE g.vehiculo = '.$vehiculo_id.' ORDER BY g.km DESC')->getResult();
    }        
    
    
    
    
    /* Este codigo es para estar poco orgulloso.
     * Devuelve un objeto de tipo resumenConsumo con los calculos procesados de cada repostaje
     */
    public function getConsumos($vehiculo){
        $resumenConsumo=new ResumenConsumo();
//$dato_list=array();
        

        $dato_list=$this->_em->createQuery('SELECT g FROM TxinbometroBundle:Gasolina g WHERE g.vehiculo = '.$vehiculo->getId().' ORDER BY g.km')->getResult();//getArrayResult();  
        
     
        //Si hay datos, comienzo el estudio
        if($dato_list!=null && count($dato_list)>1) {
            // Inicializo las variables
            $km=array();
            $nDatos=array();
            $consumo=array(array());
            $frecuencia=array(array());
            $litros=array();
            $costeLitros=array();
            $kmDia=array();
            $costeLitro=array();

            $lista = array();

            foreach (array('total', 'carretera', 'mixto', 'urbano') as $tipo) {
                $km[$tipo]=0;
                $nDatos[$tipo]=0;
                $dias[$tipo]=0;
                $litros[$tipo]=0;
                $costeLitros[$tipo]=0;
                $kmDia[$tipo]=0;
                foreach (array('maximo', 'medio') as $tipo2) {
                    $consumo[$tipo][$tipo2]=0;
                    $costeKm[$tipo][$tipo2]=0;
                    $frecuencia[$tipo][$tipo2]=0;
                    $costeLitro[$tipo][$tipo2]=0;
                }
                $consumo[$tipo]['minimo']=999;
                $costeKm[$tipo]['minimo']=999;
                $frecuencia[$tipo]['minimo']=999;
                $costeLitro[$tipo]['minimo']=999;
            }


            //Preparao el dato inicial y comienza el bucle
            $dato1=$dato_list[0];
            $dato2=$dato_list[0];

            for ($i=1;$i<count($dato_list);$i++) {
                // Obtengo los intervalos entre datos
                $dato2=$dato_list[$i];
                   
                
                $lista[$i-1]['km']=$dato2->getKm();
                $lista[$i-1]['km_recorridos']=$dato2->getKm()-$dato1->getKm();
                $lista[$i-1]['dias']=($dato2->getFecha()->getTimestamp()-$dato1->getFecha()->getTimestamp())/86400;
                $lista[$i-1]['fecha']=$dato2->getFecha();
                $lista[$i-1]['comentario']=$dato2->getComentario();
                $lista[$i-1]['coste']=$dato2->getCoste();
                $lista[$i-1]['litros']=$dato2->getLitros();
                $lista[$i-1]['consumo']=100*($dato2->getLitros()/$lista[$i-1]['km_recorridos']);
                $lista[$i-1]['coste_km']=$dato2->getCoste()/$lista[$i-1]['km_recorridos'];
                $lista[$i-1]['tipo']=$dato2->getTipo();
                $lista[$i-1]['km']=$dato2->getKm();
                $lista[$i-1]['autonomia']=($vehiculo->getCapacidad()*100)/$lista[$i-1]['consumo'];
                $lista[$i-1]['km_restantes']=$lista[$i-1]['autonomia']-$lista[$i-1]['km_recorridos'];
                $lista[$i-1]['desposito_restante']=($lista[$i-1]['km_restantes']*100)/$lista[$i-1]['autonomia'];
                $lista[$i-1]['km_dia']=$lista[$i-1]['km_recorridos']/$lista[$i-1]['dias'];

                // Calculo otros valores derivados
                $km['total']+=$lista[$i-1]['km_recorridos'];
                $dias['total']+=$lista[$i-1]['dias'];
                $litros['total']+=$lista[$i-1]['litros'];
                $costeLitros['total']+=$lista[$i-1]['coste'];
                $consumo['total']['medio']+=$lista[$i-1]['consumo'];
                $costeKm['total']['medio']+=$lista[$i-1]['coste_km'];
                $frecuencia['total']['medio']+=$lista[$i-1]['dias'];
                if($consumo['total']['minimo']>$lista[$i-1]['consumo']) $consumo['total']['minimo']=$lista[$i-1]['consumo'];
                if($consumo['total']['maximo']<$lista[$i-1]['consumo']) $consumo['total']['maximo']=$lista[$i-1]['consumo'];
                if($costeKm['total']['minimo']>$lista[$i-1]['coste_km']) $costeKm['total']['minimo']=$lista[$i-1]['coste_km'];
                if($costeKm['total']['maximo']<$lista[$i-1]['coste_km']) $costeKm['total']['maximo']=$lista[$i-1]['coste_km'];
                if($frecuencia['total']['minimo']>$lista[$i-1]['dias']) $frecuencia['total']['minimo']=$lista[$i-1]['dias'];
                if($frecuencia['total']['maximo']<$lista[$i-1]['dias']) $frecuencia['total']['maximo']=$lista[$i-1]['dias'];

                $nDatos['total']++;

                //En funcion del tipo de consumo
                $km[$dato2->getTipo()]+=$lista[$i-1]['km_recorridos'];
                $dias[$dato2->getTipo()]+=$lista[$i-1]['dias'];
                $litros[$dato2->getTipo()]+=$lista[$i-1]['litros'];
                $costeLitros[$dato2->getTipo()]+=$lista[$i-1]['coste'];
                $consumo[$dato2->getTipo()]['medio']+=$lista[$i-1]['consumo'];
                $costeKm[$dato2->getTipo()]['medio']+=$lista[$i-1]['coste_km'];
                $frecuencia[$dato2->getTipo()]['medio']+=$lista[$i-1]['dias'];
                if($consumo[$dato2->getTipo()]['minimo']>$lista[$i-1]['consumo']) $consumo[$dato2->getTipo()]['minimo']=$lista[$i-1]['consumo'];
                if($consumo[$dato2->getTipo()]['maximo']<$lista[$i-1]['consumo']) $consumo[$dato2->getTipo()]['maximo']=$lista[$i-1]['consumo'];
                if($costeKm[$dato2->getTipo()]['minimo']>$lista[$i-1]['coste_km']) $costeKm[$dato2->getTipo()]['minimo']=$lista[$i-1]['coste_km'];
                if($costeKm[$dato2->getTipo()]['maximo']<$lista[$i-1]['coste_km']) $costeKm[$dato2->getTipo()]['maximo']=$lista[$i-1]['coste_km'];
                if($frecuencia[$dato2->getTipo()]['minimo']>$lista[$i-1]['dias']) $frecuencia[$dato2->getTipo()]['minimo']=$lista[$i-1]['dias'];
                if($frecuencia[$dato2->getTipo()]['maximo']<$lista[$i-1]['dias']) $frecuencia[$dato2->getTipo()]['maximo']=$lista[$i-1]['dias'];


                $nDatos[$dato2->getTipo()]++;

                //Preparo la siguiente iteracion
                $dato1=$dato2;
            }
            // Derivo algunos valores mas para los que no es necesario hacerlos sobre la iteracion anterior

            foreach (array('total', 'carretera', 'mixto', 'urbano') as $tipo) {
                if($dias[$tipo]==0) $kmDia[$tipo]=0;
                else $kmDia[$tipo]=$km[$tipo]/$dias[$tipo];
            }


            $listado=$lista;

            foreach (array('total', 'carretera', 'mixto', 'urbano') as $tipo) {
                if($nDatos[$tipo]==0){
                    $consumo[$tipo]['medio']=null;
                    $costeKm[$tipo]['medio']=0;
                    $frecuencia[$tipo]['medio']=null;
                }else{
                    $consumo[$tipo]['medio']=$consumo[$tipo]['medio']/$nDatos[$tipo];
                    $costeKm[$tipo]['medio']=$costeKm[$tipo]['medio']/$nDatos[$tipo];
                    $frecuencia[$tipo]['medio']=$frecuencia[$tipo]['medio']/$nDatos[$tipo];
                }
            }

        }
        else {
            
            return $resumenConsumo;
            //$listado=null;
        }
        
        $resumenConsumo->setListado($listado);
        $resumenConsumo->setKm($km);
        $resumenConsumo->setDias($dias);
        $resumenConsumo->setLitros($litros);
        $resumenConsumo->setCosteLitros($costeLitros);
        $resumenConsumo->setConsumo($consumo);
        $resumenConsumo->setCosteKm($costeKm);
        $resumenConsumo->setFrecuencia($frecuencia);
        $resumenConsumo->setKmDia($kmDia);
        $resumenConsumo->setCosteLitro($costeLitro);
        /* ***********************************************************
         * *********** Ahora hago los calculos mensuales *************
         * ***********************************************************/
        
        $ff=$listado[count($listado)-1]['fecha']->getTimestamp(); //fecha fin
        //$fff=getdate($ff); //fecha fin formateada
        //$utf=gmmktime(0,0,0,$listado[count($listado)-1]['fecha']->format('n'),1,$listado[count($listado)-1]['fecha']->format('Y')); //unixtimestamp mes final
        $utf=gmmktime(0,0,0,$listado[count($listado)-1]['fecha']->format('n'),1,$listado[count($listado)-1]['fecha']->format('Y')); //unixtimestamp mes final
        $diasparaultimomes=($ff-$utf)/86400; // Dias que han pasado del ultimo mes

        $meses=array();
        $diasrestantes=array();

        $m=0; //contador de meses
        $d=count($listado)-1; //contador de repostajes
        $diasrestantes[0]=$diasparaultimomes;

        $kmrestantes=0; //kilometros restantes para completar un repostaje
        foreach (array('total', 'carretera', 'mixto', 'urbano') as $tipo) {
            $meses[0]['fecha'][$tipo]=$this->restarMeses($listado[count($listado)-1]['fecha']->format('Y'),$listado[count($listado)-1]['fecha']->format('n'),0);//($listado[count($listado)-1]['fecha']->format('Y'))."/".($listado[count($listado)-1]['fecha']->format('n'));
            $meses[0]['km_recorridos'][$tipo]=0;
        }

        while($d>=0) {
            if($kmrestantes==0) $kmrestantes=$listado[$d]['dias'];

            if($kmrestantes>$diasrestantes[$m]) {
                $meses[$m]['km_recorridos']['total']+=($diasrestantes[$m])*$listado[$d]['km_dia'];
                $meses[$m]['km_recorridos'][$listado[$d]['tipo']]+=($diasrestantes[$m])*$listado[$d]['km_dia'];

                $kmrestantes=($kmrestantes-$diasrestantes[$m]);
                $diasrestantes[$m]=0;

                $m++;
                foreach (array('total', 'carretera', 'mixto', 'urbano') as $tipo) {
                    $nuevomes=$this->restarMeses($listado[count($listado)-1]['fecha']->format('Y'),$listado[count($listado)-1]['fecha']->format('n'),$m);
                    $meses[$m]['fecha'][$tipo]=$nuevomes;
                    //$meses[$m]['fecha'][$tipo]=($listado[count($listado)-1]['fecha']->format('Y'))."/".($listado[count($listado)-1]['fecha']->format('n')-$m<10 ? "0".($listado[count($listado)-1]['fecha']->format('n')-$m) : ($listado[count($listado)-1]['fecha']->format('n')-$m));
                    $meses[$m]['km_recorridos'][$tipo]=0;
                }
                $diasrestantes[$m]=$this->diasDe($listado[count($listado)-1]['fecha']->format('Y'),$listado[count($listado)-1]['fecha']->format('n'),$m);

            }
            elseif($kmrestantes<$diasrestantes[$m]) {
                $meses[$m]['km_recorridos']['total']+=$kmrestantes*$listado[$d]['km_dia'];
                $meses[$m]['km_recorridos'][$listado[$d]['tipo']]+=$kmrestantes*$listado[$d]['km_dia'];

                $diasrestantes[$m]-=$kmrestantes;
                $kmrestantes=0;

                $d--;
            }
            else {
                $meses[$m]['km_recorridos']['total']+=$kmrestantes*$listado[$d]['km_dia'];
                $meses[$m]['km_recorridos'][$listado[$d]['tipo']]+=$kmrestantes*$listado[$d]['km_dia'];

                $diasrestantes[$m]=0;
                $kmrestantes=0;

                $m++;
                foreach (array('total', 'carretera', 'mixto', 'urbano') as $tipo) {
                    $nuevomes=$this->restarMeses($listado[count($listado)-1]['fecha']->format('Y'),$listado[count($listado)-1]['fecha']->format('n'),$m);
                    $meses[$m]['fecha'][$tipo]=$nuevomes;
                    //$meses[$m]['fecha'][$tipo]=($listado[count($listado)-1]['fecha']->format('Y'))."/".($listado[count($listado)-1]['fecha']->format('n')-$m<10 ? "0".($listado[count($listado)-1]['fecha']->format('n')-$m) : ($listado[count($listado)-1]['fecha']->format('n')-$m));
                    $meses[$m]['km_recorridos'][$tipo]=0;
                }
                $diasrestantes[$m]=$this->diasDe($listado[count($listado)-1]['fecha']->format('Y'),$listado[count($listado)-1]['fecha']->format('n'),$m);

                $d--;
            }
        }

        asort($meses);        
        
        $resumenConsumo->setMeses($meses);
        
        
        
        return $resumenConsumo;
        
    }
    
    
    
    /* Funciones necesarias para los calculos */
    
        public function restarMeses($year,$mon,$n) {
        $meses=$year*12;
        $meses+=$mon;

        $meses-=$n;

        $nyear=intval($meses/12);
        $nmes=$meses-$nyear*12;

        if($nmes==0){
            $nmes=12;
            $nyear--;
        }



        //$mes=$mon-$n;
        return ($nyear)."/".($nmes<10 ? "0".$nmes : $nmes);

    }
    
   public function diasDe($year,$mon,$n) {
        // $n es el numero de meses que le quieres restar a la cantidad para devolver los dias del mes. pon 0 si no te interesa

        $meses=$year*12;
        $meses+=$mon;

        $meses-=$n;

        $anho=intval($meses/12);
        $mes=$meses-$anho*12;

        if($mes==0){
            $mes=12;
            $anho--;
        }

        if (((fmod($anho,4)==0) and (fmod($anho,100)!=0)) or (fmod($anho,400)==0)) {
            $dias_febrero = 29;
        }
        else {
            $dias_febrero = 28;
        }
        switch($mes) {
            case 1: return 31;
                break;
            case 2: return $dias_febrero;
                break;
            case 3: return 31;
                break;
            case 4: return 30;
                break;
            case 5: return 31;
                break;
            case 6: return 30;
                break;
            case 7: return 31;
                break;
            case 8: return 31;
                break;
            case 9: return 30;
                break;
            case 10: return 31;
                break;
            case 11: return 30;
                break;
            case 12: return 31;
                break;

        }
    }    
   
}